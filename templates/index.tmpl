<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
<style>
.chart-container {
    width: 600px;
    height:200px;
}
</style>
</head>

<body>
  <h1>
    {{ .title }}
  </h1>

  <div class="container">
    <div class="row">
      <div class="col-sm">
        <canvas id="myChart0"></canvas>
      </div>
      <div class="col-sm">
        <canvas id="myChart1"></canvas>
      </div>
      <div class="col-sm">
        <canvas id="myChart2"></canvas>
      </div>
    </div>
    <div class="row">
      <div class="col-sm">
        <canvas id="myChart3"></canvas>
      </div>
      <div class="col-sm">
        <canvas id="myChart4"></canvas>
      </div>
      <div class="col-sm">
        <canvas id="myChart5"></canvas>
      </div>
    </div>
    <div class="row">
      <div style="width:400px; height:300px;" id="map"></div>
      <div class="col-sm"><pre id="output"></pre></div>
    </div>


  </div>

<!-- <canvas id="myChart1" width="400" height="400"></canvas>
<canvas id="myChart2" width="400" height="400"></canvas>
<canvas id="myChart3" width="400" height="400"></canvas>
 -->
 <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css"
  integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
  crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"
  integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA=="
  crossorigin=""></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.js"> </script>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

<script>
  $(document).ready(function() {
      dataPoints = JSON.parse({{ .allDataPoints }}).reverse();
      ctx = document.getElementById("myChart0").getContext('2d');
      window.chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
      };

      var opts = {
        elements: { point: { radius: 0 } },
        tooltips: {
          mode: 'index',
          intersect: false,
        },
        hover: {
          mode: 'nearest',
          intersect: true
        },
        scales: {
          xAxes: [{
            display: false
          }]
        }
      }
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'Relative Altitude (m)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.RelativeAltitude),
          yAxisID: 'A',
          fill: false,
        },{
          label: 'Absolute Altitude (GPS)(m)',
          backgroundColor: window.chartColors.blue,
          borderColor: window.chartColors.blue,
          data: dataPoints.map(p => p.Altitude),
          yAxisID: 'A',
          fill: false,
        }]
      },
      options: {
        tooltips: {
          mode: 'index',
          intersect: false,
        },
        hover: {
          mode: 'nearest',
          intersect: true
        },
        scales: {
          xAxes: [{
            display: false,
            scaleLabel: {
              display: true,
              labelString: 'Epoch Timestamp'
            }
          }],
          yAxes: [{
            id: 'A',
            type: 'linear',
            position: 'left',
            display: true,
            scaleLabel: {display: true}
          },{
            id: 'B',
            type: 'linear',
            position: 'right',
            display: true,
            scaleLabel: {display: true}
          }]
        }
      }
    };
    new Chart(ctx, config);

    ctx = document.getElementById("myChart1").getContext('2d');
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'X accel (g)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.AccelerationX),
          fill: false,
        }, {
          label: 'Y accel (g)',
          backgroundColor: window.chartColors.green,
          borderColor: window.chartColors.green,
          data: dataPoints.map(p => p.AccelerationY),
          fill: false,
        }, {
          label: 'Z accel (g)',
          backgroundColor: window.chartColors.blue,
          borderColor: window.chartColors.blue,
          data: dataPoints.map(p => p.AccelerationZ),
          fill: false,
        }]
      },
      options: opts
    };
    new Chart(ctx, config);


    ctx = document.getElementById("myChart2").getContext('2d');
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'Gyro X (rad/s)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.GyroRotationX),
          fill: false,
        }, {
          label: 'Gyro Y (rad/s)',
          backgroundColor: window.chartColors.green,
          borderColor: window.chartColors.green,
          data: dataPoints.map(p => p.GyroRotationY),
          fill: false,
        }, {
          label: 'Gyro Z (rad/s)',
          backgroundColor: window.chartColors.blue,
          borderColor: window.chartColors.blue,
          data: dataPoints.map(p => p.GyroRotationZ),
          fill: false,
        }]
      },
      options: opts
    };
    new Chart(ctx, config);


    ctx = document.getElementById("myChart3").getContext('2d');
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'Heading (deg)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.Heading),
          fill: false,
        },{
          label: 'Course (deg)',
          backgroundColor: window.chartColors.blue,
          borderColor: window.chartColors.blue,
          data: dataPoints.map(p => p.Course),
          fill: false,
        }]
      },
      options: opts
    };
    new Chart(ctx, config);

    ctx = document.getElementById("myChart4").getContext('2d');
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'Speed (kmh)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.Speed*3.6),
          fill: false,
        }]
      },
      options: opts
    };
    new Chart(ctx, config);

    ctx = document.getElementById("myChart5").getContext('2d');
    config = {
      type: 'line',
      data: {
        labels: dataPoints.map(p => p.Timestamp),
        datasets: [{
          label: 'Battery level (%)',
          backgroundColor: window.chartColors.red,
          borderColor: window.chartColors.red,
          data: dataPoints.map(p => p.BatteryLevel*100),
          fill: false,
        }]
      },
      options: opts
    };
    new Chart(ctx, config);

    var mymap = L.map('map').setView([51.505, -0.09], 13);
    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'mapbox.streets',
        accessToken: 'pk.eyJ1IjoiYm5qaXgiLCJhIjoiY2psZndvdHF6MTFmbDNxcGhnMnA3NGE0aiJ9.kfg0wZSHyTRjX-9jIdkt3g'
    }).addTo(mymap);
    // create a red polyline from an array of LatLng points
    var latlngs = dataPoints.map(p => [p.Latitude, p.Longitude]);
    var polyline = L.polyline(latlngs, {color: 'red'}).addTo(mymap);
    // zoom the map to the polyline
    mymap.fitBounds(polyline.getBounds());

    url = 'ws://localhost:8080/ws';
    c = new WebSocket(url);

    send = function(data){
      $("#output").append((new Date())+ " ==> "+data+"\n")
      c.send({'mydata':data})
    }

    c.onmessage = function(msg){
      var parsed = JSON.parse(msg.data)
      //$("#output").append((new Date())+ " <== "+msg.data+"\n")
      console.log(parsed)
    }

    c.onopen = function(){
      //send("ping")
      // setInterval(
      //   function(){ send("ping") }
      // , 1000 )
    }

  });


  </script>
  </body>
</html>
